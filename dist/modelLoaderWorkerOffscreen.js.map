{"version":3,"file":"modelLoaderWorkerOffscreen.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,sFAAsF,gBAAgB;AACtG;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E,kEAAkE,KAAK;AACvE;AACA,uCAAuC,eAAe;AACtD;AACA,WAAW;AACX,UAAU;AACV,gFAAgF,KAAK;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc,SAAS,oBAAoB,UAAU,kBAAkB;AACxH;AACA,qCAAqC,sCAAsC;AAC3E;AACA,4BAA4B;AAC5B,mCAAmC;AACnC;AACA;AACA,MAAM;AACN;AACA,qCAAqC,+DAA+D,cAAc,GAAG;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAsE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAA4E;AACrG;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA;AACA,iEAAiE,SAAS;AAC1E,wEAAwE,eAAe;AACvF;AACA,uCAAuC,+BAA+B,gDAAgD;AACtH,yBAAyB,oCAAoC,aAAa,+BAA+B;AACzG,QAAQ;AACR;AACA,yBAAyB,iEAAiE,cAAc,GAAG;AAC3G;AACA,IAAI;AACJ,4FAA4F,aAAa;AACzG;AACA,IAAI;AACJ;AACA,qBAAqB,mGAAmG,aAAa,KAAK;AAC1I;AACA;AACA,CAAC;AACD;AACA;AACA,yBAAyB,wC","sources":["webpack://tabagent/./src/modelLoaderWorkerOffscreen.js"],"sourcesContent":["let modelWorker = null;\r\nlet workerInitialized = false;\r\n\r\nfunction initializeModelWorker() {\r\n  if (!modelWorker && !workerInitialized) { // Prevent re-entry if already initializing\r\n    console.log(\"[OffscreenWorker-Simple] Creating Model Worker...\");\r\n    try {\r\n      const wasmPath = chrome.runtime.getURL('xenova/transformers/dist/');\r\n      modelWorker = new globalThis.Worker(chrome.runtime.getURL('model-worker.js'), { type: 'module' });\r\n      console.log(\"[OffscreenWorker-Simple] Model Worker instance created.\");\r\n\r\n      modelWorker.onmessage = (event) => {\r\n        const { type, payload } = event.data;\r\n        // Shorten log for frequent updates\r\n        if (type !== 'generationUpdate' && type !== 'loadingStatus') { // Also quiet loadingStatus\r\n          console.log(\"[OffscreenWorker-Simple] Received message from Model Worker:\", type);\r\n        }\r\n\r\n        // Define message types to forward back to background\r\n        const typesToForward = [\r\n          'workerScriptReady', // Added script ready signal\r\n          'workerReady', 'error', 'loadingStatus',\r\n          'generationStatus', 'generationUpdate', 'generationComplete', 'generationError',\r\n          'resetComplete'\r\n        ];\r\n\r\n        if (typesToForward.includes(type)) {\r\n          // Shorten log for frequent updates\r\n           if (type !== 'generationUpdate' && type !== 'loadingStatus') { // Also quiet loadingStatus\r\n             console.log(`[OffscreenWorker-Simple] Forwarding \\`${type}\\` message to background.`);\r\n           }\r\n          chrome.runtime.sendMessage({ type, payload }).catch(error => {\r\n            console.error(\"[OffscreenWorker-Simple] Error sending message to background:\", error);\r\n          });\r\n        } else {\r\n          console.log(`[OffscreenWorker-Simple] Not forwarding message type \\`${type}\\` from worker.`);\r\n        }\r\n\r\n        // Mark worker as initialized *after* receiving the SCRIPT ready signal\r\n        if (type === 'workerScriptReady') {\r\n          workerInitialized = true;\r\n          console.log(\"[OffscreenWorker-Simple] Worker script initialized.\");\r\n        }\r\n      };\r\n\r\n      modelWorker.onerror = (errorEvent) => {\r\n        console.error(\"[OffscreenWorker-Simple] Model Worker onerror EVENT:\", errorEvent);\r\n        const errorMessage = errorEvent.message || 'Unknown worker error';\r\n        const errorDetails = `Error in worker: ${errorMessage} (File: ${errorEvent.filename}, Line: ${errorEvent.lineno})`;\r\n        console.error(\"[OffscreenWorker-Simple] Model Worker onerror DETAILS:\", errorDetails);\r\n        chrome.runtime.sendMessage({ type: 'error', payload: errorDetails })\r\n        .catch(err => console.error(\"[OffscreenWorker-Simple] Error sending worker error to background:\", err));\r\n        modelWorker = null; // Reset on error\r\n        workerInitialized = false; // Reset init flag\r\n      };\r\n\r\n    } catch (error) {\r\n        console.error(\"[OffscreenWorker-Simple] FATAL: Failed to create Model Worker instance:\", error);\r\n        chrome.runtime.sendMessage({ type: 'error', payload: `Failed to instantiate model worker: ${error.message}` })\r\n         .catch(err => console.error(\"[OffscreenWorker-Simple] Error sending instantiation error to background:\", err));\r\n        modelWorker = null;\r\n    }\r\n  }\r\n  return modelWorker;\r\n}\r\n\r\n// Listen for messages from background.js\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  console.log(\"[OffscreenWorker] Received message from background:\", message.type);\r\n\r\n  const workerInstance = initializeModelWorker();\r\n\r\n  if (!workerInstance && message.type !== 'init') { \r\n      console.error(\"[OffscreenWorker-Simple] Cannot handle message, worker instance is not available and message is not 'init'.\");\r\n      sendResponse({ success: false, error: \"Model worker instance failed to initialize.\" });\r\n      return false; \r\n  }\r\n\r\n  const modelWorkerForwardableTypes = ['init', 'generate', 'interrupt', 'reset'];\r\n  const knownIgnoredTypes = [\r\n    'uiLoadingStatusUpdate', \r\n    'scrapeRequest', \r\n    'STAGE_SCRAPE_RESULT', \r\n    'driveFileListData',\r\n    'getDriveFileList',\r\n    'db:log',\r\n    'createIframe', \r\n    'removeIframe'\r\n  ];\r\n\r\n  if (modelWorkerForwardableTypes.includes(message.type)) {\r\n      if (!workerInstance) {\r\n          console.error(\"[OffscreenWorker-Simple] Cannot forward \" + message.type + \", worker instance is still not available.\");\r\n          sendResponse({ success: false, error: \"Model worker instance unavailable for forwarding.\" });\r\n          return false;\r\n      }\r\n      console.log(`[OffscreenWorker-Simple] Forwarding '${message.type}' message to actual model worker.`);\r\n      try {\r\n          const wasmPath = chrome.runtime.getURL('xenova/transformers/dist/');\r\n          const localModelPath = chrome.runtime.getURL('models/');\r\n          console.log(`[OffscreenWorker] Calculated WASM Path: ${wasmPath}`);\r\n          console.log(`[OffscreenWorker] Calculated Local Model Path: ${localModelPath}`);\r\n\r\n          workerInstance.postMessage({ type: message.type, payload: { ...message.payload, wasmPath, localModelPath } });\r\n          sendResponse({ success: true, message: `Command '${message.type}' forwarded to model worker.` });\r\n      } catch (error) {\r\n          console.error(\"[OffscreenWorker-Simple] Error posting message to actual model worker:\", error);\r\n          sendResponse({ success: false, error: `Error posting message to model worker: ${error.message}` });\r\n      }\r\n  } else if (knownIgnoredTypes.includes(message.type)) {\r\n      console.log(`[OffscreenWorker-Simple] Ignoring known message type not handled here: ${message.type}`);\r\n      // DO NOT call sendResponse. Let the appropriate handler in background.js or elsewhere respond.\r\n  } else {\r\n      console.warn(\"[OffscreenWorker-Simple] Received unhandled/unexpected message type:\", message.type);\r\n      sendResponse({ success: false, error: `Model worker offscreen document does not handle unexpected message type '${message.type}'.` });\r\n  }\r\n  return true;\r\n});\r\n\r\nconsole.log(\"[OffscreenWorker-Simple] Script loaded and ready.\");\r\ninitializeModelWorker(); // Attempt to initialize worker eagerly "],"names":[],"sourceRoot":""}