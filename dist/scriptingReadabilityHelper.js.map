{"version":3,"file":"scriptingReadabilityHelper.js","sources":["../src/scriptingReadabilityHelper.js"],"sourcesContent":["// This script is dynamically injected into the iframe created by the offscreen document (Stage 2).\r\n\r\n// DO NOT use import statements here - they won't work in scripts injected via registerContentScripts.\r\n// Readability should be globally available because Readability.js is injected first.\r\n\r\n(function() {\r\n    const DYNAMIC_SCRIPT_MESSAGE_TYPE = 'offscreenIframeResult'; // Must match background.js\r\n    console.log('[Dynamic Script Helper] Running in iframe...');\r\n\r\n    let result = { success: false, source: 'dynamic-script-helper' };\r\n\r\n    // Function to run Readability and send message\r\n    const runReadabilityAndSend = () => {\r\n        try {\r\n            if (typeof Readability === 'undefined') {\r\n                throw new Error('Readability library not found in iframe context.');\r\n            }\r\n            // Using cloneNode might be safer, but let's try direct access first in iframe context\r\n            // const documentClone = document.cloneNode(true);\r\n            const article = new Readability(document).parse();\r\n            result = {\r\n                success: true,\r\n                source: 'dynamic-script-helper',\r\n                title: article ? article.title : '',\r\n                textContent: article ? article.textContent : '',\r\n                content: article ? article.content : '',\r\n                byline: article ? article.byline : '',\r\n                length: article ? article.length : 0,\r\n                excerpt: article ? article.excerpt : '',\r\n                siteName: article ? article.siteName : ''\r\n            };\r\n            console.log('[Dynamic Script Helper] Readability parsing successful.');\r\n        } catch (e) {\r\n            console.error('[Dynamic Script Helper] Error:', e);\r\n            result.error = e.message || 'Unknown error in dynamic script helper';\r\n        }\r\n        console.log('[Dynamic Script Helper] Sending result back to background:', result);\r\n        chrome.runtime.sendMessage({ type: DYNAMIC_SCRIPT_MESSAGE_TYPE, payload: result });\r\n    };\r\n\r\n    // --- Run logic --- \r\n    // Check if the document is already loaded, otherwise wait for load event\r\n    if (document.readyState === 'complete' || document.readyState === 'interactive') {\r\n         console.log('[Dynamic Script Helper] Document already ready. Running Readability...');\r\n         runReadabilityAndSend();\r\n    } else {\r\n         console.log('[Dynamic Script Helper] Document not ready. Adding load listener...');\r\n         window.addEventListener('load', () => {\r\n              console.log('[Dynamic Script Helper] Window load event fired. Running Readability...');\r\n              runReadabilityAndSend();\r\n         }, { once: true });\r\n    }\r\n\r\n})(); "],"names":["DYNAMIC_SCRIPT_MESSAGE_TYPE","result","runReadabilityAndSend","article"],"mappings":"CAKC,UAAW,CACR,MAAMA,EAA8B,wBACpC,QAAQ,IAAI,8CAA8C,EAE1D,IAAIC,EAAS,CAAE,QAAS,GAAO,OAAQ,uBAAuB,EAG9D,MAAMC,EAAwB,IAAM,CAChC,GAAI,CACA,GAAI,OAAO,YAAgB,IACvB,MAAM,IAAI,MAAM,kDAAkD,EAItE,MAAMC,EAAU,IAAI,YAAY,QAAQ,EAAE,MAAK,EAC/CF,EAAS,CACL,QAAS,GACT,OAAQ,wBACR,MAAOE,EAAUA,EAAQ,MAAQ,GACjC,YAAaA,EAAUA,EAAQ,YAAc,GAC7C,QAASA,EAAUA,EAAQ,QAAU,GACrC,OAAQA,EAAUA,EAAQ,OAAS,GACnC,OAAQA,EAAUA,EAAQ,OAAS,EACnC,QAASA,EAAUA,EAAQ,QAAU,GACrC,SAAUA,EAAUA,EAAQ,SAAW,EACvD,EACY,QAAQ,IAAI,yDAAyD,CACxE,OAAQ,EAAG,CACR,QAAQ,MAAM,iCAAkC,CAAC,EACjDF,EAAO,MAAQ,EAAE,SAAW,wCAC/B,CACD,QAAQ,IAAI,6DAA8DA,CAAM,EAChF,OAAO,QAAQ,YAAY,CAAE,KAAMD,EAA6B,QAASC,CAAM,CAAE,CACzF,EAIQ,SAAS,aAAe,YAAc,SAAS,aAAe,eAC7D,QAAQ,IAAI,wEAAwE,EACpFC,MAEA,QAAQ,IAAI,qEAAqE,EACjF,OAAO,iBAAiB,OAAQ,IAAM,CACjC,QAAQ,IAAI,yEAAyE,EACrFA,GACd,EAAY,CAAE,KAAM,EAAI,CAAE,EAG1B,GAAI"}