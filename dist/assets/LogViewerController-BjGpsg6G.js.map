{"version":3,"file":"LogViewerController-BjGpsg6G.js","sources":["../../src/Controllers/LogViewerController.js"],"sourcesContent":["// src/Controllers/LogViewerController.js\n\n// Note: This code assumes it runs within sidepanel.html context\n// and the necessary HTML elements (#page-log-viewer, #log-viewer-control-bar, \n// #log-viewer-display-area, and the buttons/selects within) exist.\n\nconsole.log('[LogViewerController] Script loaded.');\n\nlet currentlyDisplayedLogs = []; \n\n// Element references - use IDs specific to the integrated section\nlet logContainer, sessionSelect, componentSelect, levelSelect, refreshButton, copyButton, downloadButton, clearButton;\n\n/**\n * @param {object} log \n * @returns {string}\n */\nfunction formatLogEntryToHTML(log) {\n    const timestamp = log.timestamp ? new Date(log.timestamp).toISOString() : 'NO_TIMESTAMP';\n    // Assuming logEntryData passed from db has extensionSessionId, not sessionId directly\n    const session = log.extensionSessionId ? log.extensionSessionId.slice(-8) : 'NO_SESSION'; \n    const component = log.component || 'NO_COMPONENT';\n    const level = (log.level || 'NO_LEVEL').toLowerCase();\n    const message = log.message || '';\n    const levelClass = `log-level-${level}`;\n    const escapedMessage = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\n    // Use consistent class name for styling\n    return `<div class=\"log-line ${levelClass}\">[${timestamp}][${session}][${component}][${level.toUpperCase()}] ${escapedMessage}</div>`;\n}\n\n/**\n * @param {Array<object>} logsArray \n */\nfunction displayLogs(logsArray) {\n    currentlyDisplayedLogs = logsArray || []; \n    // Use the specific display area ID\n    logContainer = document.getElementById('log-viewer-display-area'); \n    if (!logContainer) {\n        console.error(\"[LogViewerController] Cannot find log display area #log-viewer-display-area\");\n        return;\n    }\n\n    if (!Array.isArray(logsArray) || logsArray.length === 0) {\n        logContainer.innerHTML = '<div class=\"text-center p-4 text-gray-500 dark:text-gray-400\">No logs match the current filters.</div>';\n        return;\n    }\n    const logsHtml = logsArray.map(formatLogEntryToHTML).join('');\n    logContainer.innerHTML = logsHtml;\n    console.debug(`[LogViewerController] Displayed ${logsArray.length} log entries.`);\n}\n\n/**\n * @param {string} selectElementId \n * @param {string} fieldName - Field in the log schema (e.g., 'extensionSessionId', 'component', 'level')\n * @param {string} [defaultValue='all'] \n */\nasync function populateViewerDropdown(selectElementId, fieldName, defaultValue = 'all') {\n    const selectElement = document.getElementById(selectElementId);\n    if (!selectElement) {\n         console.error(`[LogViewerController] Dropdown element not found: #${selectElementId}`);\n        return;\n    }\n\n    console.debug(`[LogViewerController] Populating viewer dropdown ${selectElementId} for ${fieldName}, default: ${defaultValue}`);\n    try {\n        // Send message to background/db script to get unique values\n        const response = await chrome.runtime.sendMessage({\n            type: 'getUniqueFilterValuesRequest', // Ensure db.js handles this event\n            payload: { field: fieldName }\n        });\n\n        if (!response || !response.success) {\n            throw new Error(response?.error || `Background script failed for ${fieldName}`);\n        }\n\n        // Clear existing options (except the first \"All\")\n        while (selectElement.options.length > 1) {\n            selectElement.remove(1);\n        }\n\n        // Populate with new options\n        (response.data || []).forEach(value => {\n            const option = document.createElement('option');\n            option.value = value;\n            // Shorten session IDs for display\n            option.textContent = (fieldName === 'extensionSessionId' && value && value.length > 10) ? `...${value.slice(-8)}` : value;\n            selectElement.appendChild(option);\n        });\n        selectElement.value = defaultValue; // Set the default/initial value\n\n    } catch (error) {\n        console.error(`[LogViewerController] Error populating dropdown ${selectElementId} (field: ${fieldName}):`, error);\n        if(logContainer) logContainer.innerHTML += `<div class=\"log-line log-level-error\">Error populating ${fieldName} filter: ${error.message}</div>`;\n    }\n}\n\n\nasync function fetchAndDisplayLogs() {\n    logContainer = document.getElementById('log-viewer-display-area'); \n    if (!logContainer) {\n        console.error(\"[LogViewerController] Cannot fetch logs, display area not found.\");\n        return;\n    }\n    \n    // Make sure elements are selected before accessing .value\n    sessionSelect = document.getElementById('viewerSessionSelect');\n    componentSelect = document.getElementById('viewerComponentSelect');\n    levelSelect = document.getElementById('viewerLevelSelect');\n    refreshButton = document.getElementById('viewerRefreshButton'); // Needed for disabling\n\n     if (!sessionSelect || !componentSelect || !levelSelect || !refreshButton) {\n         console.error(\"[LogViewerController] One or more filter controls not found.\");\n         logContainer.innerHTML = `<div class=\"log-line log-level-error\">Error: Filter controls not found.</div>`;\n         return;\n     }\n\n\n    const filters = {\n        // Use correct field name based on schema\n        sessionIds: [sessionSelect.value || 'all'], \n        components: [componentSelect.value || 'all'],\n        levels: [levelSelect.value || 'all']\n    };\n\n    console.info('[LogViewerController] Fetching logs with filters:', filters);\n    logContainer.innerHTML = '<div class=\"text-center p-4 text-gray-500 dark:text-gray-400\">Fetching logs...</div>';\n    refreshButton.disabled = true;\n\n    try {\n         // Send message to background/db script to get logs based on filters\n        const response = await chrome.runtime.sendMessage({\n            type: 'getLogsRequest', // Ensure db.js handles this event\n            payload: { filters }\n        });\n\n        if (!response || !response.success) {\n            throw new Error(response?.error || 'Background script failed to fetch logs.');\n        }\n\n        displayLogs(response.data || []); // Display the logs\n\n    } catch (error) {\n        console.error('[LogViewerController] Error fetching or displaying logs:', error);\n        displayLogs([]); // Clear display on error\n        logContainer.innerHTML = `<div class=\"log-line log-level-error\">Error fetching logs: ${error.message}</div>`;\n    } finally {\n         if (refreshButton) refreshButton.disabled = false;\n    }\n}\n\n/**\n * @param {Array<object>} logsArray \n * @returns {string} \n */\nfunction formatLogsToString(logsArray) {\n    if (!Array.isArray(logsArray)) return \"No logs found or invalid data.\";\n    return logsArray.map(log => {\n        const timestamp = log.timestamp ? new Date(log.timestamp).toISOString() : 'NO_TIMESTAMP';\n        const session = log.extensionSessionId || 'NO_SESSION'; // Use correct field name\n        const component = log.component || 'NO_COMPONENT';\n        const level = (log.level || 'NO_LEVEL').toUpperCase();\n        const message = log.message || '';\n        return `[${timestamp}][${session}][${component}][${level}] ${message}`;\n    }).join('\\n');\n}\n\n// Exported function to be called by sidepanel.js\nexport async function initializeLogViewerController() {\n    console.log('[LogViewerController] Initializing...');\n\n    // Select elements using IDs specific to the integrated section\n    logContainer = document.getElementById('log-viewer-display-area');\n    sessionSelect = document.getElementById('viewerSessionSelect');\n    componentSelect = document.getElementById('viewerComponentSelect');\n    levelSelect = document.getElementById('viewerLevelSelect');\n    refreshButton = document.getElementById('viewerRefreshButton');\n    copyButton = document.getElementById('viewerCopyButton');\n    downloadButton = document.getElementById('viewerDownloadButton');\n    clearButton = document.getElementById('viewerClearButton'); // Note: Clear button logic might need DB interaction later\n\n    // Check if all elements were found\n    if (!logContainer || !sessionSelect || !componentSelect || !levelSelect || !refreshButton || !copyButton || !downloadButton || !clearButton) {\n        console.error(\"[LogViewerController] Failed to find all required elements within #page-log-viewer. Initialization aborted.\");\n        if(logContainer) logContainer.textContent = 'Initialization Error: Could not find page elements.';\n        else console.error(\"Log container itself (#log-viewer-display-area) not found.\");\n        return;\n    }\n\n    // Populate dropdowns and fetch initial logs\n    // Use correct field names ('extensionSessionId', 'component', 'level')\n    await Promise.all([\n        populateViewerDropdown('viewerSessionSelect', 'extensionSessionId'),\n        populateViewerDropdown('viewerComponentSelect', 'component'),\n        populateViewerDropdown('viewerLevelSelect', 'level')\n    ]);\n\n    await fetchAndDisplayLogs();\n\n    // Add event listeners\n    refreshButton.addEventListener('click', fetchAndDisplayLogs);\n    sessionSelect.addEventListener('change', fetchAndDisplayLogs);\n    componentSelect.addEventListener('change', fetchAndDisplayLogs);\n    levelSelect.addEventListener('change', fetchAndDisplayLogs);\n\n    copyButton.addEventListener('click', () => {\n        console.info('[LogViewerController] Copy Logs button clicked.');\n        const formattedText = formatLogsToString(currentlyDisplayedLogs);\n        navigator.clipboard.writeText(formattedText).then(() => {\n            console.info('[LogViewerController] Logs copied to clipboard.');\n            // Simple visual feedback\n            const originalText = copyButton.innerHTML;\n            copyButton.textContent = 'Copied!';\n            setTimeout(() => { copyButton.innerHTML = originalText; }, 1500); \n        }, (err) => {\n            console.error('[LogViewerController] Failed to copy logs:', err);\n            alert('Failed to copy logs to clipboard.');\n        });\n    });\n\n    downloadButton.addEventListener('click', () => {\n        console.info('[LogViewerController] Download Logs button clicked.');\n        const filters = {\n             sessionIds: [sessionSelect?.value || 'all'],\n             components: [componentSelect?.value || 'all'],\n             levels: [levelSelect?.value || 'all']\n        };\n        const formattedText = formatLogsToString(currentlyDisplayedLogs);\n        const blob = new Blob([formattedText], { type: 'text/plain;charset=utf-8' });\n        const url = URL.createObjectURL(blob);\n        // Construct filename based on filters\n        const filename = `tabagent-logs-view-${filters.sessionIds[0]}-${filters.components[0]}-${filters.levels[0]}.txt`.replace(/[:\\\\/*?\"<>|]/g, '_'); // Sanitize\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        console.info(`[LogViewerController] Log download triggered for ${filename}.`);\n    });\n    \n    // Add listener for clear button if needed (currently just clears display)\n    clearButton.addEventListener('click', () => {\n         console.warn('[LogViewerController] Clear button clicked - currently only clears display, does not delete from DB.');\n         displayLogs([]); // Just clear the current view\n         // Future: Could send a 'clearLogsRequest' to db.js if desired\n    });\n\n    console.info(\"[LogViewerController] Initialized successfully.\");\n}\n\n// Removed: document.addEventListener('DOMContentLoaded', initializeLogViewer);\n// Initialization will be triggered by sidepanel.js based on context. "],"names":[],"mappings":"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"}