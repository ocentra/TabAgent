console.log("[LogViewerController] Script loaded.");let f=[],r,i,s,a,d,u,m,w;function E(o){const e=o.timestamp?new Date(o.timestamp).toISOString():"NO_TIMESTAMP",c=o.extensionSessionId?o.extensionSessionId.slice(-8):"NO_SESSION",l=o.component||"NO_COMPONENT",t=(o.level||"NO_LEVEL").toLowerCase(),n=o.message||"",g=`log-level-${t}`,C=n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");return`<div class="log-line ${g}">[${e}][${c}][${l}][${t.toUpperCase()}] ${C}</div>`}function L(o){if(f=o||[],r=document.getElementById("log-viewer-display-area"),!r){console.error("[LogViewerController] Cannot find log display area #log-viewer-display-area");return}if(!Array.isArray(o)||o.length===0){r.innerHTML='<div class="text-center p-4 text-gray-500 dark:text-gray-400">No logs match the current filters.</div>';return}const e=o.map(E).join("");r.innerHTML=e,console.debug(`[LogViewerController] Displayed ${o.length} log entries.`)}async function v(o,e,c="all"){const l=document.getElementById(o);if(!l){console.error(`[LogViewerController] Dropdown element not found: #${o}`);return}console.debug(`[LogViewerController] Populating viewer dropdown ${o} for ${e}, default: ${c}`);try{const t=await chrome.runtime.sendMessage({type:"getUniqueFilterValuesRequest",payload:{field:e}});if(!t||!t.success)throw new Error((t==null?void 0:t.error)||`Background script failed for ${e}`);for(;l.options.length>1;)l.remove(1);(t.data||[]).forEach(n=>{const g=document.createElement("option");g.value=n,g.textContent=e==="extensionSessionId"&&n&&n.length>10?`...${n.slice(-8)}`:n,l.appendChild(g)}),l.value=c}catch(t){console.error(`[LogViewerController] Error populating dropdown ${o} (field: ${e}):`,t),r&&(r.innerHTML+=`<div class="log-line log-level-error">Error populating ${e} filter: ${t.message}</div>`)}}async function p(){if(r=document.getElementById("log-viewer-display-area"),!r){console.error("[LogViewerController] Cannot fetch logs, display area not found.");return}if(i=document.getElementById("viewerSessionSelect"),s=document.getElementById("viewerComponentSelect"),a=document.getElementById("viewerLevelSelect"),d=document.getElementById("viewerRefreshButton"),!i||!s||!a||!d){console.error("[LogViewerController] One or more filter controls not found."),r.innerHTML='<div class="log-line log-level-error">Error: Filter controls not found.</div>';return}const o={sessionIds:[i.value||"all"],components:[s.value||"all"],levels:[a.value||"all"]};console.info("[LogViewerController] Fetching logs with filters:",o),r.innerHTML='<div class="text-center p-4 text-gray-500 dark:text-gray-400">Fetching logs...</div>',d.disabled=!0;try{const e=await chrome.runtime.sendMessage({type:"getLogsRequest",payload:{filters:o}});if(!e||!e.success)throw new Error((e==null?void 0:e.error)||"Background script failed to fetch logs.");L(e.data||[])}catch(e){console.error("[LogViewerController] Error fetching or displaying logs:",e),L([]),r.innerHTML=`<div class="log-line log-level-error">Error fetching logs: ${e.message}</div>`}finally{d&&(d.disabled=!1)}}function y(o){return Array.isArray(o)?o.map(e=>{const c=e.timestamp?new Date(e.timestamp).toISOString():"NO_TIMESTAMP",l=e.extensionSessionId||"NO_SESSION",t=e.component||"NO_COMPONENT",n=(e.level||"NO_LEVEL").toUpperCase(),g=e.message||"";return`[${c}][${l}][${t}][${n}] ${g}`}).join(`
`):"No logs found or invalid data."}async function h(){if(console.log("[LogViewerController] Initializing..."),r=document.getElementById("log-viewer-display-area"),i=document.getElementById("viewerSessionSelect"),s=document.getElementById("viewerComponentSelect"),a=document.getElementById("viewerLevelSelect"),d=document.getElementById("viewerRefreshButton"),u=document.getElementById("viewerCopyButton"),m=document.getElementById("viewerDownloadButton"),w=document.getElementById("viewerClearButton"),!r||!i||!s||!a||!d||!u||!m||!w){console.error("[LogViewerController] Failed to find all required elements within #page-log-viewer. Initialization aborted."),r?r.textContent="Initialization Error: Could not find page elements.":console.error("Log container itself (#log-viewer-display-area) not found.");return}await Promise.all([v("viewerSessionSelect","extensionSessionId"),v("viewerComponentSelect","component"),v("viewerLevelSelect","level")]),await p(),d.addEventListener("click",p),i.addEventListener("change",p),s.addEventListener("change",p),a.addEventListener("change",p),u.addEventListener("click",()=>{console.info("[LogViewerController] Copy Logs button clicked.");const o=y(f);navigator.clipboard.writeText(o).then(()=>{console.info("[LogViewerController] Logs copied to clipboard.");const e=u.innerHTML;u.textContent="Copied!",setTimeout(()=>{u.innerHTML=e},1500)},e=>{console.error("[LogViewerController] Failed to copy logs:",e),alert("Failed to copy logs to clipboard.")})}),m.addEventListener("click",()=>{console.info("[LogViewerController] Download Logs button clicked.");const o={sessionIds:[(i==null?void 0:i.value)||"all"],components:[(s==null?void 0:s.value)||"all"],levels:[(a==null?void 0:a.value)||"all"]},e=y(f),c=new Blob([e],{type:"text/plain;charset=utf-8"}),l=URL.createObjectURL(c),t=`tabagent-logs-view-${o.sessionIds[0]}-${o.components[0]}-${o.levels[0]}.txt`.replace(/[:\\/*?"<>|]/g,"_"),n=document.createElement("a");n.href=l,n.download=t,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(l),console.info(`[LogViewerController] Log download triggered for ${t}.`)}),w.addEventListener("click",()=>{console.warn("[LogViewerController] Clear button clicked - currently only clears display, does not delete from DB."),L([])}),console.info("[LogViewerController] Initialized successfully.")}export{h as initializeLogViewerController};
//# sourceMappingURL=LogViewerController-BZ1bQVHQ.js.map
