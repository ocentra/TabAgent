{"version":3,"file":"modelLoaderWorkerOffscreen.js","sources":["../src/modelLoaderWorkerOffscreen.js"],"sourcesContent":["let modelWorker = null;\r\nlet workerInitialized = false;\r\n\r\nfunction initializeModelWorker() {\r\n  if (!modelWorker && !workerInitialized) { // Prevent re-entry if already initializing\r\n    console.log(\"[OffscreenWorker-Simple] Creating Model Worker...\");\r\n    try {\r\n      const wasmPath = chrome.runtime.getURL('xenova/transformers/dist/');\r\n      modelWorker = new globalThis.Worker(chrome.runtime.getURL('model-worker.js'), { type: 'module' });\r\n      console.log(\"[OffscreenWorker-Simple] Model Worker instance created.\");\r\n\r\n      modelWorker.onmessage = (event) => {\r\n        const { type, payload } = event.data;\r\n        // Shorten log for frequent updates\r\n        if (type !== 'generationUpdate' && type !== 'loadingStatus') { // Also quiet loadingStatus\r\n          console.log(\"[OffscreenWorker-Simple] Received message from Model Worker:\", type);\r\n        }\r\n\r\n        // Define message types to forward back to background\r\n        const typesToForward = [\r\n          'workerScriptReady', // Added script ready signal\r\n          'workerReady', 'error', 'loadingStatus',\r\n          'generationStatus', 'generationUpdate', 'generationComplete', 'generationError',\r\n          'resetComplete'\r\n        ];\r\n\r\n        if (typesToForward.includes(type)) {\r\n          // Shorten log for frequent updates\r\n           if (type !== 'generationUpdate' && type !== 'loadingStatus') { // Also quiet loadingStatus\r\n             console.log(`[OffscreenWorker-Simple] Forwarding \\`${type}\\` message to background.`);\r\n           }\r\n          chrome.runtime.sendMessage({ type, payload }).catch(error => {\r\n            console.error(\"[OffscreenWorker-Simple] Error sending message to background:\", error);\r\n          });\r\n        } else {\r\n          console.log(`[OffscreenWorker-Simple] Not forwarding message type \\`${type}\\` from worker.`);\r\n        }\r\n\r\n        // Mark worker as initialized *after* receiving the SCRIPT ready signal\r\n        if (type === 'workerScriptReady') {\r\n          workerInitialized = true;\r\n          console.log(\"[OffscreenWorker-Simple] Worker script initialized.\");\r\n        }\r\n      };\r\n\r\n      modelWorker.onerror = (errorEvent) => {\r\n        console.error(\"[OffscreenWorker-Simple] Model Worker onerror EVENT:\", errorEvent);\r\n        const errorMessage = errorEvent.message || 'Unknown worker error';\r\n        const errorDetails = `Error in worker: ${errorMessage} (File: ${errorEvent.filename}, Line: ${errorEvent.lineno})`;\r\n        console.error(\"[OffscreenWorker-Simple] Model Worker onerror DETAILS:\", errorDetails);\r\n        chrome.runtime.sendMessage({ type: 'error', payload: errorDetails })\r\n        .catch(err => console.error(\"[OffscreenWorker-Simple] Error sending worker error to background:\", err));\r\n        modelWorker = null; // Reset on error\r\n        workerInitialized = false; // Reset init flag\r\n      };\r\n\r\n    } catch (error) {\r\n        console.error(\"[OffscreenWorker-Simple] FATAL: Failed to create Model Worker instance:\", error);\r\n        chrome.runtime.sendMessage({ type: 'error', payload: `Failed to instantiate model worker: ${error.message}` })\r\n         .catch(err => console.error(\"[OffscreenWorker-Simple] Error sending instantiation error to background:\", err));\r\n        modelWorker = null;\r\n    }\r\n  }\r\n  return modelWorker;\r\n}\r\n\r\n// Listen for messages from background.js\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  console.log(\"[OffscreenWorker] Received message from background:\", message.type);\r\n\r\n  const workerInstance = initializeModelWorker();\r\n\r\n  if (!workerInstance && message.type !== 'init') { \r\n      console.error(\"[OffscreenWorker-Simple] Cannot handle message, worker instance is not available and message is not 'init'.\");\r\n      sendResponse({ success: false, error: \"Model worker instance failed to initialize.\" });\r\n      return false; \r\n  }\r\n\r\n  const modelWorkerForwardableTypes = ['init', 'generate', 'interrupt', 'reset'];\r\n  const knownIgnoredTypes = [\r\n    'uiLoadingStatusUpdate', \r\n    'scrapeRequest', \r\n    'STAGE_SCRAPE_RESULT', \r\n    'driveFileListData',\r\n    'getDriveFileList',\r\n    'db:log',\r\n    'createIframe', \r\n    'removeIframe'\r\n  ];\r\n\r\n  if (modelWorkerForwardableTypes.includes(message.type)) {\r\n      if (!workerInstance) {\r\n          console.error(\"[OffscreenWorker-Simple] Cannot forward \" + message.type + \", worker instance is still not available.\");\r\n          sendResponse({ success: false, error: \"Model worker instance unavailable for forwarding.\" });\r\n          return false;\r\n      }\r\n      console.log(`[OffscreenWorker-Simple] Forwarding '${message.type}' message to actual model worker.`);\r\n      try {\r\n          const wasmPath = chrome.runtime.getURL('xenova/transformers/dist/');\r\n          const localModelPath = chrome.runtime.getURL('models/');\r\n          console.log(`[OffscreenWorker] Calculated WASM Path: ${wasmPath}`);\r\n          console.log(`[OffscreenWorker] Calculated Local Model Path: ${localModelPath}`);\r\n\r\n          workerInstance.postMessage({ type: message.type, payload: { ...message.payload, wasmPath, localModelPath } });\r\n          sendResponse({ success: true, message: `Command '${message.type}' forwarded to model worker.` });\r\n      } catch (error) {\r\n          console.error(\"[OffscreenWorker-Simple] Error posting message to actual model worker:\", error);\r\n          sendResponse({ success: false, error: `Error posting message to model worker: ${error.message}` });\r\n      }\r\n  } else if (knownIgnoredTypes.includes(message.type)) {\r\n      console.log(`[OffscreenWorker-Simple] Ignoring known message type not handled here: ${message.type}`);\r\n      // DO NOT call sendResponse. Let the appropriate handler in background.js or elsewhere respond.\r\n  } else {\r\n      console.warn(\"[OffscreenWorker-Simple] Received unhandled/unexpected message type:\", message.type);\r\n      sendResponse({ success: false, error: `Model worker offscreen document does not handle unexpected message type '${message.type}'.` });\r\n  }\r\n  return true;\r\n});\r\n\r\nconsole.log(\"[OffscreenWorker-Simple] Script loaded and ready.\");\r\ninitializeModelWorker(); // Attempt to initialize worker eagerly "],"names":[],"mappings":"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"}