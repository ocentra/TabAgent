{"version":3,"file":"pageExtractor.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACJA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,UAAU;AACxB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,qDAAqD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,6DAA6D;AAC5G;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE,cAAc;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,2EAA2E,qCAAqC;AAChH;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN,6EAA6E,qCAAqC;AAClH;AACA,yEAAyE,qCAAqC;AAC9G,OAAO,yBAAyB,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,kBAAkB;AACrI,kGAAkG,6BAA6B;AAC/H,kHAAkH,6BAA6B;;AAE/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uCAAuC;AAC3F;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8EAA8E,qCAAqC;AACnH;AACA,uEAAuE,qCAAqC;AAC5G,KAAK,yBAAyB,wBAAwB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD,sBAAsB,GAAG,iBAAiB,GAAG,yBAAyB,cAAc,aAAa;;AAE1J;AACA;AACA;AACA;AACA;AACA;;AAEA,yEAAyE,YAAY;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,OAAO,E","sources":["webpack://tabagent/webpack/bootstrap","webpack://tabagent/webpack/runtime/define property getters","webpack://tabagent/webpack/runtime/hasOwnProperty shorthand","webpack://tabagent/webpack/runtime/make namespace object","webpack://tabagent/./src/PageExtractor.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\n\n/**\n * Structure of extracted content\n * @typedef {Object} ExtractedContent\n * @property {string} title - Page title or fallback\n * @property {string} content - Cleaned HTML content\n * @property {string} text - Full text content\n * @property {Object[]} segments - Array of content segments\n * @property {Object[]} images - Array of image data\n * @property {Object[]} videos - Array of video data\n * @property {Object[]} tables - Array of table data\n * @property {Object[]} links - Array of link data\n * @property {string} url - Page URL\n * @property {string} extractedAt - ISO timestamp\n * @property {string} [author] - Author name\n * @property {string} [publishDate] - Publication date\n * @property {string} [metaDescription] - Meta description\n * @property {string} [language] - Page language\n * @property {string[]} [keywords] - Keywords or tags\n * @property {string[]} [categories] - Categories\n * @property {number} [wordCount] - Word count\n * @property {number} [readingTime] - Reading time in minutes\n */\n\n/**\n * Structure of a content segment\n * @typedef {Object} ContentSegment\n * @property {string} type - 'heading' | 'paragraph' | 'list' | 'image' | 'video' | 'table' | 'quote' | 'code' | 'button' | 'listitem'\n * @property {number} [level] - Heading level (1-6)\n * @property {string} [text] - Text content\n * @property {Object} [data] - Image, video, table, or button data\n * @property {Object} [context] - Parent link or button context\n * @property {string} [context.type] - 'link' | 'button'\n * @property {string} [context.href] - Link href (if link)\n * @property {string} [context.text] - Button text or aria-label (if button)\n */\n\n/**\n * Structure of image data\n * @typedef {Object} ImageData\n * @property {string} src - Image URL\n * @property {string} alt - Alt text\n * @property {number} [width] - Image width\n * @property {number} [height] - Image height\n * @property {string} [caption] - Caption\n */\n\n/**\n * Structure of video data\n * @typedef {Object} VideoData\n * @property {string} src - Video URL\n * @property {string} type - MIME type\n * @property {string} [poster] - Poster image URL\n * @property {number} [duration] - Duration in seconds\n */\n\n/**\n * Structure of table data\n * @typedef {Object} TableData\n * @property {string[]} headers - Table headers\n * @property {string[][]} rows - Table rows\n * @property {string} [caption] - Table caption\n */\n\n/**\n * Structure of link data\n * @typedef {Object} LinkData\n * @property {string} href - Link URL\n * @property {string} text - Link text\n * @property {string} [title] - Title attribute\n * @property {string} [rel] - Rel attribute\n */\n\n/**\n * Structure of button data\n * @typedef {Object} ButtonData\n * @property {string} text - Button text or aria-label\n * @property {string} [ariaLabel] - ARIA label\n */\n\nfunction getTextDensity(element, doc) {\n  doc = doc || document;\n  var text = (element.innerText || '').trim();\n  var rect = element.getBoundingClientRect();\n  var area = rect.width * rect.height;\n  return area > 0 ? text.length / area : 0;\n}\n\nfunction isBoilerplate(element) {\n  var boilerplateTags = ['header', 'footer', 'nav', 'aside', 'script', 'style', 'iframe', 'noscript', 'form', 'svg', 'banner'];\n  var boilerplateClasses = [\n    'ad', 'advert', 'banner', 'sidebar', 'menu', 'nav', 'footer', 'widget',\n    'social', 'share', 'comment', 'related', 'newsletter', 'popup', 'cookie',\n    'modal', 'promo', 'sponsored', 'trending', 'login', 'signup'\n  ];\n  var tagName = element.tagName.toLowerCase();\n  var className = (element.className || '').toString().toLowerCase();\n  var id = (element.id || '').toLowerCase();\n  var role = (element.getAttribute('role') || '').toLowerCase();\n\n  return (\n    boilerplateTags.includes(tagName) ||\n    boilerplateClasses.some(function(cls) { return className.includes(cls) || id.includes(cls); }) ||\n    element.querySelector('[class*=\"ad\"], [id*=\"ad\"], [class*=\"social\"], [class*=\"share\"], [class*=\"sponsor\"]') ||\n    role === 'navigation' ||\n    role === 'complementary' ||\n    role === 'banner' ||\n    element.hasAttribute('aria-hidden') ||\n    getComputedStyle(element).display === 'none' ||\n    getComputedStyle(element).visibility === 'hidden' ||\n    getComputedStyle(element).opacity === '0'\n  );\n}\n\nfunction scoreElement(element, doc) {\n  doc = doc || document;\n  var score = 0;\n  var tagName = element.tagName.toLowerCase();\n\n  var tagScores = {\n    article: 30,\n    main: 25,\n    section: 20,\n    div: 8,\n    p: 15,\n    figure: 12\n  };\n  score += tagScores[tagName] || 0;\n\n  score += getTextDensity(element, doc) * 200;\n\n  var paragraphs = element.querySelectorAll('p, li, blockquote').length;\n  score += paragraphs * 15;\n  score += Math.min((element.innerText || '').length, 15000) / 30;\n\n  if (isBoilerplate(element)) {\n    score -= 200;\n  }\n\n  var className = (element.className || '').toString().toLowerCase();\n  var id = (element.id || '').toLowerCase();\n  var contentKeywords = ['content', 'article', 'main', 'story', 'body', 'post', 'entry', 'page'];\n  if (contentKeywords.some(function(keyword) { return className.includes(keyword) || id.includes(keyword); })) {\n    score += 50;\n  }\n\n  if (((element.innerText || '').trim().length || 0) < 50) {\n    score -= 40;\n  }\n\n  if (element.querySelector('[itemprop=\"articleBody\"], [itemtype*=\"Article\"], [itemtype*=\"NewsArticle\"]')) {\n    score += 80;\n  }\n\n  var links = element.querySelectorAll('a').length;\n  var textLength = (element.innerText || '').length || 1;\n  if (links / textLength > 0.15) {\n    score -= 30;\n  }\n\n  var richContent = element.querySelectorAll('img, video, table, blockquote, pre').length;\n  score += richContent * 20;\n\n  return score;\n}\n\nfunction cleanContent(element) {\n  var cloned = element.cloneNode(true);\n  var selectorsToRemove = [\n    'header', 'footer', 'nav', 'aside',\n    '[class*=\"ad\"]', '[id*=\"ad\"]',\n    '[class*=\"social\"]', '[class*=\"share\"]',\n    '[class*=\"comment\"]', '[class*=\"related\"]',\n    '[class*=\"sponsor\"]', '[class*=\"promo\"]',\n    'script', 'style', 'iframe', 'noscript',\n    '[aria-hidden=\"true\"]', '[style*=\"display: none\"]',\n    'svg', 'canvas', '[role=\"presentation\"]',\n    '[role=\"banner\"]', '[role=\"complementary\"]'\n  ].join(',');\n\n  cloned.querySelectorAll(selectorsToRemove).forEach(function(el) { el.remove(); });\n\n  cloned.querySelectorAll('*').forEach(function(el) { \n    el.removeAttribute('style');\n    Array.from(el.attributes).forEach(function(attr) {\n      if (attr.name.startsWith('on')) {\n        el.removeAttribute(attr.name);\n      }\n    });\n  });\n\n  cloned.querySelectorAll('div, section, p, span, figure').forEach(function(el) {\n    if (!el.innerText.trim() && !el.querySelector('img, video, a, table')) {\n      el.remove();\n    }\n  });\n\n  cloned.querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, blockquote, button').forEach(function(el) {\n    el.textContent = (el.innerText || '').replace(/\\s+/g, ' ').trim();\n  });\n\n  cloned.querySelectorAll('img, video, a').forEach(function(el) {\n    var keepAttrs = ['src', 'alt', 'href', 'title', 'poster', 'type', 'aria-label'];\n    Array.from(el.attributes).forEach(function(attr) {\n      if (!keepAttrs.includes(attr.name)) el.removeAttribute(attr.name);\n    });\n  });\n\n  return cloned;\n}\n\nfunction getParentContext(element) {\n  var parent = element.parentElement;\n  while (parent && parent !== document.body) {\n    if (parent.tagName === 'A' && parent.href) {\n      return {\n        type: 'link',\n        href: parent.href,\n        text: (parent.innerText || '').trim()\n      };\n    }\n    if (parent.tagName === 'BUTTON') {\n      return {\n        type: 'button',\n        text: (parent.innerText || parent.getAttribute('aria-label') || '').trim(),\n        ariaLabel: parent.getAttribute('aria-label') || undefined\n      };\n    }\n    parent = parent.parentElement;\n  }\n  return null;\n}\n\nfunction extractSegments(element) {\n  var segments = [];\n  var elements = element.querySelectorAll('h1, h2, h3, h4, h5, h6, p, ul, ol, li, figure, video, table, blockquote, pre, button, div');\n\n  elements.forEach(function(el) {\n    var text = (el.innerText || '').trim();\n    if (!text && !el.querySelector('img, video, table') && !['BUTTON', 'FIGURE', 'VIDEO', 'TABLE'].includes(el.tagName)) return;\n\n    var context = getParentContext(el);\n\n    if (['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(el.tagName)) {\n      segments.push({\n        type: 'heading',\n        level: parseInt(el.tagName[1]),\n        text: text,\n        context: context\n      });\n    } else if (el.tagName === 'P') {\n      segments.push({\n        type: 'paragraph',\n        text: text,\n        context: context\n      });\n    } else if (['UL', 'OL'].includes(el.tagName)) {\n      var items = Array.from(el.querySelectorAll('li')).map(function(li) { return (li.innerText || '').trim(); }).filter(Boolean);\n      segments.push({\n        type: 'list',\n        text: items.join(' | '),\n        context: context\n      });\n    } else if (el.tagName === 'LI') {\n      segments.push({\n        type: 'listitem',\n        text: text,\n        context: context\n      });\n    } else if (el.tagName === 'FIGURE') {\n      var img = el.querySelector('img');\n      if (img) {\n        if (segments.length > 0 && segments[segments.length - 1].type === 'image' && segments[segments.length - 1].data?.src === img.src) {\n        } else {\n          segments.push({\n            type: 'image',\n            text: el.querySelector('figcaption')?.innerText.trim(),\n            data: {\n              src: img.src,\n              alt: (img.alt || '').trim(),\n              width: img.width || undefined,\n              height: img.height || undefined,\n              caption: el.querySelector('figcaption')?.innerText.trim()\n            },\n            context: context\n          });\n        }\n      }\n    } else if (el.tagName === 'VIDEO') {\n      segments.push({\n        type: 'video',\n        data: {\n          src: el.src || el.querySelector('source')?.src || '',\n          type: el.type || el.querySelector('source')?.type || '',\n          poster: el.poster || undefined,\n          duration: el.duration || undefined\n        },\n        context: context\n      });\n    } else if (el.tagName === 'TABLE') {\n      var headers = Array.from(el.querySelectorAll('th')).map(function(th) { return (th.innerText || '').trim(); });\n      var rows = Array.from(el.querySelectorAll('tr')).map(function(row) {\n        return Array.from(row.querySelectorAll('td')).map(function(td) { return (td.innerText || '').trim(); });\n      }).filter(function(row) { return row.length > 0; });\n      segments.push({\n        type: 'table',\n        text: el.querySelector('caption')?.innerText.trim(),\n        data: {\n          headers: headers,\n          rows: rows,\n          caption: el.querySelector('caption')?.innerText.trim()\n        },\n        context: context\n      });\n    } else if (el.tagName === 'BLOCKQUOTE') {\n      segments.push({\n        type: 'quote',\n        text: text,\n        context: context\n      });\n    } else if (el.tagName === 'PRE') {\n      segments.push({\n        type: 'code',\n        text: text,\n        context: context\n      });\n    } else if (el.tagName === 'BUTTON') {\n      segments.push({\n        type: 'button',\n        text: text,\n        data: {\n          text: text,\n          ariaLabel: el.getAttribute('aria-label') || undefined\n        },\n        context: context\n      });\n    } else if (el.tagName === 'DIV') {\n      if (el.children.length === 0 && text.length > 0 && text.length < 50) {\n        if (text.match(/^[\\d.,%]+$/) || text.toLowerCase().includes('saving') || text.toLowerCase().includes('compute') || text.toLowerCase().includes('parameter')) {\n          segments.push({\n            type: 'text_block',\n            text: text,\n            context: context\n          });\n        }\n      } else if (el.querySelector('img') && !el.querySelector('figure')) {\n        var divImg = el.querySelector('img');\n        var alreadyAdded = segments.some(seg => seg.type === 'image' && seg.data?.src === divImg.src);\n        if (!alreadyAdded) {\n          segments.push({\n            type: 'image',\n            text: null,\n            data: {\n              src: divImg.src,\n              alt: (divImg.alt || '').trim(),\n              width: divImg.width || undefined,\n              height: divImg.height || undefined,\n              caption: null\n            },\n            context: context\n          });\n        }\n      }\n    }\n  });\n\n  return segments;\n}\n\nfunction extractMetadata(doc) {\n  doc = doc || document;\n  var author = doc.querySelector('meta[name=\"author\"]')?.getAttribute('content') ||\n    doc.querySelector('[itemprop=\"author\"]')?.innerText.trim() ||\n    doc.querySelector('[rel=\"author\"]')?.innerText.trim() ||\n    doc.querySelector('.author-name, .byline')?.innerText.trim();\n  var publishDate = doc.querySelector('meta[name=\"publish-date\"]')?.getAttribute('content') ||\n    doc.querySelector('[itemprop=\"datePublished\"]')?.getAttribute('content') ||\n    doc.querySelector('time[datetime]')?.getAttribute('datetime') ||\n    doc.querySelector('.date, .published')?.innerText.trim();\n  var metaDescription = doc.querySelector('meta[name=\"description\"]')?.getAttribute('content') ||\n    doc.querySelector('meta[property=\"og:description\"]')?.getAttribute('content');\n  var language = doc.documentElement.lang || navigator.language || undefined;\n  var keywords = doc.querySelector('meta[name=\"keywords\"]')?.getAttribute('content')?.split(',').map(function(k) { return k.trim(); }) ||\n    Array.from(doc.querySelectorAll('[itemprop=\"keywords\"], .tag, .category')).map(function(el) { return el.innerText.trim(); }).filter(Boolean);\n  var categories = Array.from(doc.querySelectorAll('[itemprop=\"genre\"], .category, .section')).map(function(el) { return el.innerText.trim(); }).filter(Boolean);\n\n  return {\n    author: author,\n    publishDate: publishDate,\n    metaDescription: metaDescription,\n    language: language,\n    keywords: keywords.length > 0 ? keywords : undefined,\n    categories: categories.length > 0 ? categories : undefined\n  };\n}\n\nfunction filterLinks(links) {\n  var validLinks = [];\n  var seenHrefs = new Set();\n\n  links.forEach(function(link) {\n    var href = link.href;\n    var text = (link.innerText || '').trim();\n    if (!href || !text || href.startsWith('javascript:') || href === '#' || href.startsWith('mailto:')) return;\n\n    var restrictedDomains = [\n      'twitter.com', 'facebook.com', 'linkedin.com', 'instagram.com',\n      'pinterest.com', 'youtube.com', 'tiktok.com', 'snapchat.com'\n    ];\n    try {\n      var url = new URL(href);\n      if (restrictedDomains.some(function(domain) { return url.hostname.includes(domain); })) return;\n      if (url.hostname.includes('ad') || url.pathname.includes('ad') || url.search.includes('ad')) return;\n    } catch {\n      return;\n    }\n\n    if (!seenHrefs.has(href)) {\n      seenHrefs.add(href);\n      validLinks.push({\n        href: href,\n        text: text,\n        title: link.getAttribute('title') || undefined,\n        rel: link.getAttribute('rel') || undefined\n      });\n    }\n  });\n\n  return validLinks;\n}\n\nfunction extractVideos(element) {\n  var videos = [];\n  var videoElements = element.querySelectorAll('video, [data-video]');\n\n  videoElements.forEach(function(vid) {\n    var src = vid.getAttribute('src') || vid.querySelector('source')?.getAttribute('src') || '';\n    if (!src) return;\n\n    videos.push({\n      src: src,\n      type: vid.getAttribute('type') || vid.querySelector('source')?.getAttribute('type') || '',\n      poster: vid.getAttribute('poster') || undefined,\n      duration: vid instanceof HTMLVideoElement ? vid.duration : undefined\n    });\n  });\n\n  return videos;\n}\n\nfunction extractTables(element) {\n  var tables = [];\n  var tableElements = element.querySelectorAll('table');\n\n  tableElements.forEach(function(table) {\n    var headers = Array.from(table.querySelectorAll('th')).map(function(th) { return (th.innerText || '').trim(); });\n    var rows = Array.from(table.querySelectorAll('tr')).map(function(row) {\n      return Array.from(row.querySelectorAll('td')).map(function(td) { return (td.innerText || '').trim(); });\n    }).filter(function(row) { return row.length > 0; });\n    var caption = table.querySelector('caption')?.innerText.trim();\n\n    if (headers.length > 0 || rows.length > 0) {\n      tables.push({\n        headers: headers,\n        rows: rows,\n        caption: caption\n      });\n    }\n  });\n\n  return tables;\n}\n\nfunction extractContent(doc) {\n  doc = doc || document;\n  console.log('[PageExtractor] extractContent called.');\n  try {\n    if (!doc.body.innerText.trim()) {\n      console.warn('[PageExtractor] No content found in body.');\n      return {\n        title: doc.title.trim() || 'Untitled',\n        content: '',\n        text: doc.body.innerText.trim() || '',\n        segments: [],\n        images: [],\n        videos: [],\n        tables: [],\n        links: [],\n        url: doc.location.href,\n        extractedAt: new Date().toISOString(),\n        wordCount: 0,\n        readingTime: 0\n      };\n    }\n\n    var candidates = doc.querySelectorAll('article, main, section, div, [role=\"main\"], [itemprop=\"articleBody\"]');\n    var bestCandidate = null;\n    var highestScore = -Infinity;\n\n    Array.from(candidates).forEach(function(candidate) {\n      var score = scoreElement(candidate, doc);\n      if (score > highestScore) {\n        highestScore = score;\n        bestCandidate = candidate;\n      }\n    });\n\n    if (!bestCandidate || highestScore < 50) {\n      console.warn('No suitable container found, trying fallbacks.');\n      var fallbacks = [doc.body, doc.querySelector('[class*=\"content\"]'), doc.querySelector('[id*=\"content\"]')];\n      for (var i = 0; i < fallbacks.length; i++) {\n        var fallback = fallbacks[i];\n        if (fallback && scoreElement(fallback, doc) > highestScore) {\n          bestCandidate = fallback;\n          highestScore = scoreElement(fallback, doc);\n        }\n      }\n    }\n\n    if (!bestCandidate) {\n      console.warn('No valid content container found, using body fallback.');\n      var bodyText = doc.body.innerText.trim() || '';\n      return {\n        title: doc.title.trim() || 'Untitled',\n        content: '',\n        text: bodyText,\n        segments: [{ type: 'paragraph', text: bodyText }],\n        images: [],\n        videos: [],\n        tables: [],\n        links: [],\n        url: doc.location.href,\n        extractedAt: new Date().toISOString(),\n        wordCount: bodyText.split(/\\s+/).length,\n        readingTime: Math.ceil(bodyText.split(/\\s+/).length / 200)\n      };\n    }\n\n    console.log(`[PageExtractor] Found best candidate: ${bestCandidate.tagName}#${bestCandidate.id}.${bestCandidate.className} with score: ${highestScore}`);\n\n    var cleanedContent = cleanContent(bestCandidate);\n    var metadata = extractMetadata(doc);\n    var segments = extractSegments(cleanedContent);\n    var text = cleanedContent.innerText.trim() || '';\n    var wordCount = text.split(/\\s+/).length;\n    var readingTime = Math.ceil(wordCount / 200);\n\n    console.log(`[PageExtractor] Extracted text length after cleaning: ${text.length}`);\n\n    if (text.length < 50) {\n      console.warn('[PageExtractor] Extracted text too short, using body fallback.');\n      var bodyText = doc.body.innerText.trim() || '';\n      return {\n        title: doc.title.trim() || 'Untitled',\n        content: '',\n        text: bodyText,\n        segments: [{ type: 'paragraph', text: bodyText }],\n        images: [],\n        videos: [],\n        tables: [],\n        links: [],\n        url: doc.location.href,\n        extractedAt: new Date().toISOString(),\n        wordCount: bodyText.split(/\\s+/).length,\n        readingTime: Math.ceil(bodyText.split(/\\s+/).length / 200),\n        author: metadata.author,\n        publishDate: metadata.publishDate,\n        metaDescription: metadata.metaDescription,\n        language: metadata.language,\n        keywords: metadata.keywords,\n        categories: metadata.categories\n      };\n    }\n\n    return {\n      title: doc.title.trim() || doc.querySelector('h1')?.innerText.trim() || 'Untitled',\n      content: cleanedContent.innerHTML,\n      text: text,\n      segments: segments,\n      images: Array.from(cleanedContent.querySelectorAll('img')).map(function(img) {\n        return {\n          src: img.src,\n          alt: (img.alt || '').trim(),\n          width: img.width || undefined,\n          height: img.height || undefined,\n          caption: img.closest('figure')?.querySelector('figcaption')?.innerText.trim()\n        };\n      }),\n      videos: extractVideos(cleanedContent),\n      tables: extractTables(cleanedContent),\n      links: filterLinks(Array.from(cleanedContent.querySelectorAll('a[href]'))),\n      url: doc.location.href,\n      extractedAt: new Date().toISOString(),\n      wordCount: wordCount,\n      readingTime: readingTime,\n      author: metadata.author,\n      publishDate: metadata.publishDate,\n      metaDescription: metadata.metaDescription,\n      language: metadata.language,\n      keywords: metadata.keywords,\n      categories: metadata.categories\n    };\n  } catch (error) {\n    console.error('Content extraction failed:', error);\n    var bodyText = doc.body.innerText.trim() || '';\n    return {\n      title: doc.title.trim() || 'Untitled',\n      content: '',\n      text: bodyText,\n      segments: [{ type: 'paragraph', text: bodyText }],\n      images: [],\n      videos: [],\n      tables: [],\n      links: [],\n      url: doc.location.href,\n      extractedAt: new Date().toISOString(),\n      wordCount: bodyText.split(/\\s+/).length,\n      readingTime: Math.ceil(bodyText.split(/\\s+/).length / 200)\n    };\n  }\n}\n\nconst scraper = {\n  extract: extractContent,\n  version: '2.2.0'\n};\n\n// Expose the scraper object globally for access from executeScript context\nif (typeof window !== 'undefined') {\n  window.TabAgentPageExtractor = scraper;\n}\n\nexport default scraper;"],"names":[],"sourceRoot":""}