{"version":3,"file":"LogViewerController-BZ1bQVHQ.js","sources":["../../src/Controllers/LogViewerController.js"],"sourcesContent":["// src/Controllers/LogViewerController.js\n\n// Note: This code assumes it runs within sidepanel.html context\n// and the necessary HTML elements (#page-log-viewer, #log-viewer-control-bar, \n// #log-viewer-display-area, and the buttons/selects within) exist.\n\nconsole.log('[LogViewerController] Script loaded.');\n\nlet currentlyDisplayedLogs = []; \n\n// Element references - use IDs specific to the integrated section\nlet logContainer, sessionSelect, componentSelect, levelSelect, refreshButton, copyButton, downloadButton, clearButton;\n\n/**\n * @param {object} log \n * @returns {string}\n */\nfunction formatLogEntryToHTML(log) {\n    const timestamp = log.timestamp ? new Date(log.timestamp).toISOString() : 'NO_TIMESTAMP';\n    // Assuming logEntryData passed from db has extensionSessionId, not sessionId directly\n    const session = log.extensionSessionId ? log.extensionSessionId.slice(-8) : 'NO_SESSION'; \n    const component = log.component || 'NO_COMPONENT';\n    const level = (log.level || 'NO_LEVEL').toLowerCase();\n    const message = log.message || '';\n    const levelClass = `log-level-${level}`;\n    const escapedMessage = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\n    // Use consistent class name for styling\n    return `<div class=\"log-line ${levelClass}\">[${timestamp}][${session}][${component}][${level.toUpperCase()}] ${escapedMessage}</div>`;\n}\n\n/**\n * @param {Array<object>} logsArray \n */\nfunction displayLogs(logsArray) {\n    currentlyDisplayedLogs = logsArray || []; \n    // Use the specific display area ID\n    logContainer = document.getElementById('log-viewer-display-area'); \n    if (!logContainer) {\n        console.error(\"[LogViewerController] Cannot find log display area #log-viewer-display-area\");\n        return;\n    }\n\n    if (!Array.isArray(logsArray) || logsArray.length === 0) {\n        logContainer.innerHTML = '<div class=\"text-center p-4 text-gray-500 dark:text-gray-400\">No logs match the current filters.</div>';\n        return;\n    }\n    const logsHtml = logsArray.map(formatLogEntryToHTML).join('');\n    logContainer.innerHTML = logsHtml;\n    console.debug(`[LogViewerController] Displayed ${logsArray.length} log entries.`);\n}\n\n/**\n * @param {string} selectElementId \n * @param {string} fieldName - Field in the log schema (e.g., 'extensionSessionId', 'component', 'level')\n * @param {string} [defaultValue='all'] \n */\nasync function populateViewerDropdown(selectElementId, fieldName, defaultValue = 'all') {\n    const selectElement = document.getElementById(selectElementId);\n    if (!selectElement) {\n         console.error(`[LogViewerController] Dropdown element not found: #${selectElementId}`);\n        return;\n    }\n\n    console.debug(`[LogViewerController] Populating viewer dropdown ${selectElementId} for ${fieldName}, default: ${defaultValue}`);\n    try {\n        // Send message to background/db script to get unique values\n        const response = await chrome.runtime.sendMessage({\n            type: 'getUniqueFilterValuesRequest', // Ensure db.js handles this event\n            payload: { field: fieldName }\n        });\n\n        if (!response || !response.success) {\n            throw new Error(response?.error || `Background script failed for ${fieldName}`);\n        }\n\n        // Clear existing options (except the first \"All\")\n        while (selectElement.options.length > 1) {\n            selectElement.remove(1);\n        }\n\n        // Populate with new options\n        (response.data || []).forEach(value => {\n            const option = document.createElement('option');\n            option.value = value;\n            // Shorten session IDs for display\n            option.textContent = (fieldName === 'extensionSessionId' && value && value.length > 10) ? `...${value.slice(-8)}` : value;\n            selectElement.appendChild(option);\n        });\n        selectElement.value = defaultValue; // Set the default/initial value\n\n    } catch (error) {\n        console.error(`[LogViewerController] Error populating dropdown ${selectElementId} (field: ${fieldName}):`, error);\n        if(logContainer) logContainer.innerHTML += `<div class=\"log-line log-level-error\">Error populating ${fieldName} filter: ${error.message}</div>`;\n    }\n}\n\n\nasync function fetchAndDisplayLogs() {\n    logContainer = document.getElementById('log-viewer-display-area'); \n    if (!logContainer) {\n        console.error(\"[LogViewerController] Cannot fetch logs, display area not found.\");\n        return;\n    }\n    \n    // Make sure elements are selected before accessing .value\n    sessionSelect = document.getElementById('viewerSessionSelect');\n    componentSelect = document.getElementById('viewerComponentSelect');\n    levelSelect = document.getElementById('viewerLevelSelect');\n    refreshButton = document.getElementById('viewerRefreshButton'); // Needed for disabling\n\n     if (!sessionSelect || !componentSelect || !levelSelect || !refreshButton) {\n         console.error(\"[LogViewerController] One or more filter controls not found.\");\n         logContainer.innerHTML = `<div class=\"log-line log-level-error\">Error: Filter controls not found.</div>`;\n         return;\n     }\n\n\n    const filters = {\n        // Use correct field name based on schema\n        sessionIds: [sessionSelect.value || 'all'], \n        components: [componentSelect.value || 'all'],\n        levels: [levelSelect.value || 'all']\n    };\n\n    console.info('[LogViewerController] Fetching logs with filters:', filters);\n    logContainer.innerHTML = '<div class=\"text-center p-4 text-gray-500 dark:text-gray-400\">Fetching logs...</div>';\n    refreshButton.disabled = true;\n\n    try {\n         // Send message to background/db script to get logs based on filters\n        const response = await chrome.runtime.sendMessage({\n            type: 'getLogsRequest', // Ensure db.js handles this event\n            payload: { filters }\n        });\n\n        if (!response || !response.success) {\n            throw new Error(response?.error || 'Background script failed to fetch logs.');\n        }\n\n        displayLogs(response.data || []); // Display the logs\n\n    } catch (error) {\n        console.error('[LogViewerController] Error fetching or displaying logs:', error);\n        displayLogs([]); // Clear display on error\n        logContainer.innerHTML = `<div class=\"log-line log-level-error\">Error fetching logs: ${error.message}</div>`;\n    } finally {\n         if (refreshButton) refreshButton.disabled = false;\n    }\n}\n\n/**\n * @param {Array<object>} logsArray \n * @returns {string} \n */\nfunction formatLogsToString(logsArray) {\n    if (!Array.isArray(logsArray)) return \"No logs found or invalid data.\";\n    return logsArray.map(log => {\n        const timestamp = log.timestamp ? new Date(log.timestamp).toISOString() : 'NO_TIMESTAMP';\n        const session = log.extensionSessionId || 'NO_SESSION'; // Use correct field name\n        const component = log.component || 'NO_COMPONENT';\n        const level = (log.level || 'NO_LEVEL').toUpperCase();\n        const message = log.message || '';\n        return `[${timestamp}][${session}][${component}][${level}] ${message}`;\n    }).join('\\n');\n}\n\n// Exported function to be called by sidepanel.js\nexport async function initializeLogViewerController() {\n    console.log('[LogViewerController] Initializing...');\n\n    // Select elements using IDs specific to the integrated section\n    logContainer = document.getElementById('log-viewer-display-area');\n    sessionSelect = document.getElementById('viewerSessionSelect');\n    componentSelect = document.getElementById('viewerComponentSelect');\n    levelSelect = document.getElementById('viewerLevelSelect');\n    refreshButton = document.getElementById('viewerRefreshButton');\n    copyButton = document.getElementById('viewerCopyButton');\n    downloadButton = document.getElementById('viewerDownloadButton');\n    clearButton = document.getElementById('viewerClearButton'); // Note: Clear button logic might need DB interaction later\n\n    // Check if all elements were found\n    if (!logContainer || !sessionSelect || !componentSelect || !levelSelect || !refreshButton || !copyButton || !downloadButton || !clearButton) {\n        console.error(\"[LogViewerController] Failed to find all required elements within #page-log-viewer. Initialization aborted.\");\n        if(logContainer) logContainer.textContent = 'Initialization Error: Could not find page elements.';\n        else console.error(\"Log container itself (#log-viewer-display-area) not found.\");\n        return;\n    }\n\n    // Populate dropdowns and fetch initial logs\n    // Use correct field names ('extensionSessionId', 'component', 'level')\n    await Promise.all([\n        populateViewerDropdown('viewerSessionSelect', 'extensionSessionId'),\n        populateViewerDropdown('viewerComponentSelect', 'component'),\n        populateViewerDropdown('viewerLevelSelect', 'level')\n    ]);\n\n    await fetchAndDisplayLogs();\n\n    // Add event listeners\n    refreshButton.addEventListener('click', fetchAndDisplayLogs);\n    sessionSelect.addEventListener('change', fetchAndDisplayLogs);\n    componentSelect.addEventListener('change', fetchAndDisplayLogs);\n    levelSelect.addEventListener('change', fetchAndDisplayLogs);\n\n    copyButton.addEventListener('click', () => {\n        console.info('[LogViewerController] Copy Logs button clicked.');\n        const formattedText = formatLogsToString(currentlyDisplayedLogs);\n        navigator.clipboard.writeText(formattedText).then(() => {\n            console.info('[LogViewerController] Logs copied to clipboard.');\n            // Simple visual feedback\n            const originalText = copyButton.innerHTML;\n            copyButton.textContent = 'Copied!';\n            setTimeout(() => { copyButton.innerHTML = originalText; }, 1500); \n        }, (err) => {\n            console.error('[LogViewerController] Failed to copy logs:', err);\n            alert('Failed to copy logs to clipboard.');\n        });\n    });\n\n    downloadButton.addEventListener('click', () => {\n        console.info('[LogViewerController] Download Logs button clicked.');\n        const filters = {\n             sessionIds: [sessionSelect?.value || 'all'],\n             components: [componentSelect?.value || 'all'],\n             levels: [levelSelect?.value || 'all']\n        };\n        const formattedText = formatLogsToString(currentlyDisplayedLogs);\n        const blob = new Blob([formattedText], { type: 'text/plain;charset=utf-8' });\n        const url = URL.createObjectURL(blob);\n        // Construct filename based on filters\n        const filename = `tabagent-logs-view-${filters.sessionIds[0]}-${filters.components[0]}-${filters.levels[0]}.txt`.replace(/[:\\\\/*?\"<>|]/g, '_'); // Sanitize\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        console.info(`[LogViewerController] Log download triggered for ${filename}.`);\n    });\n    \n    // Add listener for clear button if needed (currently just clears display)\n    clearButton.addEventListener('click', () => {\n         console.warn('[LogViewerController] Clear button clicked - currently only clears display, does not delete from DB.');\n         displayLogs([]); // Just clear the current view\n         // Future: Could send a 'clearLogsRequest' to db.js if desired\n    });\n\n    console.info(\"[LogViewerController] Initialized successfully.\");\n}\n\n// Removed: document.addEventListener('DOMContentLoaded', initializeLogViewer);\n// Initialization will be triggered by sidepanel.js based on context. "],"names":["currentlyDisplayedLogs","logContainer","sessionSelect","componentSelect","levelSelect","refreshButton","copyButton","downloadButton","clearButton","formatLogEntryToHTML","log","timestamp","session","component","level","message","levelClass","escapedMessage","displayLogs","logsArray","logsHtml","populateViewerDropdown","selectElementId","fieldName","defaultValue","selectElement","response","value","option","error","fetchAndDisplayLogs","filters","formatLogsToString","initializeLogViewerController","formattedText","originalText","err","blob","url","filename","a"],"mappings":"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"}