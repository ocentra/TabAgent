{"version":3,"file":"scriptingReadabilityHelper.js","mappings":";;;;AAAA;;AAEA;AACA;;AAEA;AACA,iEAAiE;AACjE;;AAEA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,qCAAqC,oDAAoD;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,UAAU,IAAI,YAAY;AAC1B;;AAEA,CAAC,K","sources":["webpack://tabagent/./src/scriptingReadabilityHelper.js"],"sourcesContent":["// This script is dynamically injected into the iframe created by the offscreen document (Stage 2).\n\n// DO NOT use import statements here - they won't work in scripts injected via registerContentScripts.\n// Readability should be globally available because Readability.js is injected first.\n\n(function() {\n    const DYNAMIC_SCRIPT_MESSAGE_TYPE = 'offscreenIframeResult'; // Must match background.js\n    console.log('[Dynamic Script Helper] Running in iframe...');\n\n    let result = { success: false, source: 'dynamic-script-helper' };\n\n    // Function to run Readability and send message\n    const runReadabilityAndSend = () => {\n        try {\n            if (typeof Readability === 'undefined') {\n                throw new Error('Readability library not found in iframe context.');\n            }\n            // Using cloneNode might be safer, but let's try direct access first in iframe context\n            // const documentClone = document.cloneNode(true);\n            const article = new Readability(document).parse();\n            result = {\n                success: true,\n                source: 'dynamic-script-helper',\n                title: article ? article.title : '',\n                textContent: article ? article.textContent : '',\n                content: article ? article.content : '',\n                byline: article ? article.byline : '',\n                length: article ? article.length : 0,\n                excerpt: article ? article.excerpt : '',\n                siteName: article ? article.siteName : ''\n            };\n            console.log('[Dynamic Script Helper] Readability parsing successful.');\n        } catch (e) {\n            console.error('[Dynamic Script Helper] Error:', e);\n            result.error = e.message || 'Unknown error in dynamic script helper';\n        }\n        console.log('[Dynamic Script Helper] Sending result back to background:', result);\n        chrome.runtime.sendMessage({ type: DYNAMIC_SCRIPT_MESSAGE_TYPE, payload: result });\n    };\n\n    // --- Run logic --- \n    // Check if the document is already loaded, otherwise wait for load event\n    if (document.readyState === 'complete' || document.readyState === 'interactive') {\n         console.log('[Dynamic Script Helper] Document already ready. Running Readability...');\n         runReadabilityAndSend();\n    } else {\n         console.log('[Dynamic Script Helper] Document not ready. Adding load listener...');\n         window.addEventListener('load', () => {\n              console.log('[Dynamic Script Helper] Window load event fired. Running Readability...');\n              runReadabilityAndSend();\n         }, { once: true });\n    }\n\n})(); "],"names":[],"sourceRoot":""}